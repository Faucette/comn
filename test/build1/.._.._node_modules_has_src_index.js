__COMN_DEFINE__(document.getElementById("__comn-module-13__"), [
[13, function(require, exports, module, undefined, global) {
/* ../../node_modules/has/src/index.js */

var isNative = require(14),
    getPrototypeOf = require(15),
    isNullOrUndefined = require(10);


var nativeHasOwnProp = Object.prototype.hasOwnProperty,
    baseHas;


module.exports = has;


function has(object, key) {
    if (isNullOrUndefined(object)) {
        return false;
    } else {
        return baseHas(object, key);
    }
}

if (isNative(nativeHasOwnProp)) {
    baseHas = function baseHas(object, key) {
        return nativeHasOwnProp.call(object, key);
    };
} else {
    baseHas = function baseHas(object, key) {
        var proto = getPrototypeOf(object);

        if (isNullOrUndefined(proto)) {
            return key in object;
        } else {
            return (key in object) && (!(key in proto) || proto[key] !== object[key]);
        }
    };
}


}],
[14, function(require, exports, module, undefined, global) {
/* ../../node_modules/is_native/src/index.js */

var isFunction = require(4),
    isNullOrUndefined = require(10),
    escapeRegExp = require(16);


var reHostCtor = /^\[object .+?Constructor\]$/,

    functionToString = Function.prototype.toString,

    reNative = RegExp("^" +
        escapeRegExp(Object.prototype.toString)
        .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    ),

    isHostObject;


module.exports = isNative;


function isNative(value) {
    return !isNullOrUndefined(value) && (
        isFunction(value) ?
        reNative.test(functionToString.call(value)) : (
            typeof(value) === "object" && (
                (isHostObject(value) ? reNative : reHostCtor).test(value) || false
            )
        )
    ) || false;
}

try {
    String({
        "toString": 0
    } + "");
} catch (e) {
    isHostObject = function isHostObject() {
        return false;
    };
}

isHostObject = function isHostObject(value) {
    return !isFunction(value.toString) && typeof(value + "") === "string";
};


}],
[15, function(require, exports, module, undefined, global) {
/* ../../node_modules/get_prototype_of/src/index.js */

var isObject = require(3),
    isNative = require(14),
    isNullOrUndefined = require(10);


var nativeGetPrototypeOf = Object.getPrototypeOf,
    baseGetPrototypeOf;


module.exports = getPrototypeOf;


function getPrototypeOf(value) {
    if (isNullOrUndefined(value)) {
        return null;
    } else {
        return baseGetPrototypeOf(value);
    }
}

if (isNative(nativeGetPrototypeOf)) {
    baseGetPrototypeOf = function baseGetPrototypeOf(value) {
        return nativeGetPrototypeOf(isObject(value) ? value : Object(value)) || null;
    };
} else {
    if ("".__proto__ === String.prototype) {
        baseGetPrototypeOf = function baseGetPrototypeOf(value) {
            return value.__proto__ || null;
        };
    } else {
        baseGetPrototypeOf = function baseGetPrototypeOf(value) {
            return value.constructor ? value.constructor.prototype : null;
        };
    }
}


}],
[16, function(require, exports, module, undefined, global) {
/* ../../node_modules/escape_regexp/src/index.js */

var toString = require(17);


var reRegExpChars = /[.*+?\^${}()|\[\]\/\\]/g,
    reHasRegExpChars = new RegExp(reRegExpChars.source);


module.exports = escapeRegExp;


function escapeRegExp(string) {
    string = toString(string);
    return (
        (string && reHasRegExpChars.test(string)) ?
        string.replace(reRegExpChars, "\\$&") :
        string
    );
}


}],
[17, function(require, exports, module, undefined, global) {
/* ../../node_modules/to_string/src/index.js */

var isString = require(9),
    isNullOrUndefined = require(10);


module.exports = toString;


function toString(value) {
    if (isString(value)) {
        return value;
    } else if (isNullOrUndefined(value)) {
        return "";
    } else {
        return value + "";
    }
}


}],
[18, function(require, exports, module, undefined, global) {
/* a.js */

var isObject = require(3);


var a;


if (!isObject(null)) {
    a = function a() {
        return "a";
    };
}


module.exports = a;


}],
[19, function(require, exports, module, undefined, global) {
/* ab.js */

module.exports = ab;


function ab() {
    return "ab";
}


}]]);
